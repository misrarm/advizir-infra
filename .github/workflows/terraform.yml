name: "Terraform Infrastructure Change Management Pipeline with GitHub Actions"

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches:
    - master
    - production
    - staging
    - development

env:
 # verbosity setting for Terraform logs
 TF_LOG: INFO

jobs:
  prepare:
    runs-on: ubuntu-latest
    name: Collect environment name from branch name
    steps:
    - name: Some check on branch
      id: branch_check
      run: |
            echo "Running on branch ${{ github.ref }}"
            if [ "${{ github.ref }}" = "refs/heads/master" ]; then
              echo "::set-output name=env_name::PROD"
            elif [ "${{ github.ref }}" = "refs/heads/production" ]; then
              echo "::set-output name=env_name::PROD"
            elif [ "${{ github.ref }}" = "refs/heads/staging" ]; then
              echo "::set-output name=env_name::QA"
            elif [ "${{ github.ref }}" = "refs/heads/development" ]; then
              echo "::set-output name=env_name::DEV"
            else
              echo "::set-output name=env_name::DEV"
            fi

    - name: Use variable setup in previous step
      run: echo "I'm using variable ${{ steps.branch_check.outputs.env_name }}"

    outputs:
      env_name: ${{ steps.branch_check.outputs.env_name }}

  snyk:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest
    environment: ${{ needs.preprare.outputs.env_name }}
    needs: [ prepare ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Snyk CLI to check for security issues
        # Snyk can be used to break the build when it detects security issues.
        # In this case we want to upload the SAST issues to GitHub Code Scanning
        uses: snyk/actions/setup@806182742461562b67788a64410098c9d9b96adb

  terraform:
   name: "Terraform Infrastructure Change Management"
   environment: ${{ needs.preprare.outputs.env_name }}
   needs: [ snyk, prepare ]
   env:
    GITHUB_TOKEN: ${{ secrets.TF_MODULES_TOKEN }}
   runs-on: ubuntu-latest
   defaults:
     run:
       shell: bash
       # We keep Terraform files in the terraform directory.
       working-directory: .

   steps:
    - name: Checkout the repository to the runner
      uses: actions/checkout@v3

    - name: Setup Terraform with specified version on the runner
      uses: hashicorp/setup-terraform@v2

    - name: Setup terraform variables
      id: vars
      run: |-
        cat > pipeline.auto.tfvars <<EOF
        project_id="${{ vars.PROJECT_ID }}"
        datasets_config="${{ vars.DATASETS_CONFIG }}"
        scheduled_query_input_stats_table="${{ vars.SCHEDULED_QUERY_INPUT_STATS_TABLE }}"
        location="${{ vars.LOCATION }}"
        EOF

    #  DON NOT FORGET THE STATE FOLDER
    - name: Terraform init
      id: init
      run: terraform init
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    - name: Terraform validate
      id: validate
      run: terraform validate
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

      # On push to "main", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
